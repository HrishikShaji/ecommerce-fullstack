// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  phone        String @default("10")
  role          Role      @default(USER)
  products      Product[]
  categories    Category[]
  billboards    BillBoard[]
}

model Product {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  images String[]
  price Int

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String @db.ObjectId
  category         Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  billoardId String @db.ObjectId
  billboard         BillBoard     @relation(fields: [billoardId], references: [id], onDelete: Cascade)

  
  sizeId String  @db.ObjectId
  size         Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  colorId String  @db.ObjectId
  color         Color     @relation(fields: [colorId], references: [id], onDelete: Cascade)

}

model Category {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  parentId String? @db.ObjectId
  products Product[]
  images String[]
  userId String @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}
enum Role {
  ADMIN
  USER
}

model BillBoard {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  parentId String? @db.ObjectId
  products Product[]
  userId String @db.ObjectId
  images String[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

}

model Size {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  products Product[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

  }
model Color {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  hexCode String
  products Product[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

