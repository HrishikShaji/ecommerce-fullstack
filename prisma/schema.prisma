// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  phone        String @default("10")
  role          Role      @default(USER)
  orders        Order[]
  cart          Cart?
  stores        Store[]
}

model Store {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userId String @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products      Product[]
  billboards    BillBoard[]
  orders        Order[]
}

model Product {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId String @db.ObjectId
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId String @db.ObjectId
  category         Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  billoardId String @db.ObjectId
  billboard         BillBoard     @relation(fields: [billoardId], references: [id], onDelete: Cascade)
  brandId String  @db.ObjectId
  brand         Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]
  variants Variant[]

}
model Variant {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  images String[]
  price Int
  stock Int
  discount Int
sizeId String @db.ObjectId
size Size @relation(fields: [sizeId],references: [id],onDelete: Cascade)
colorId String @db.ObjectId
color Color @relation(fields: [colorId],references: [id],onDelete: Cascade)
productId String @db.ObjectId
product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
}

model Category {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  parentId String? @db.ObjectId
  products Product[]
  images String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum Role {
  ADMIN
  USER
  SELLER
}

model BillBoard {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  parentId String? @db.ObjectId
  products Product[]
  images String[]
  storeId String @db.ObjectId
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Brand {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  }
model Size {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  variants Variant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  }
model Color {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  hexCode String
  variants Variant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CartItem {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  product         Product     @relation(fields: [productId], references: [id],onDelete:Cascade)
  cartId String @db.ObjectId
  cart        Cart     @relation(fields: [cartId], references: [id])
}


model Cart {

  id     String @id @default(auto()) @map("_id") @db.ObjectId
  cartItems CartItem[]
  userId String @db.ObjectId @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}
model Order {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    orderItems OrderItem[]
    isPaid Boolean @default(false)
    phone String @default("")
    address String @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    storeId String @db.ObjectId
    store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model OrderItem{

 id String @id @default(auto()) @map("_id") @db.ObjectId
 orderId String @db.ObjectId
 order Order @relation(fields: [orderId],references: [id])
 productId String @db.ObjectId
 product Product @relation(fields:[productId],references: [id])

}
